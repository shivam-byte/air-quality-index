# -*- coding: utf-8 -*-
"""flask-app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sIRpcAjHVTvEm2thuMU5jPFLQQz_MNb0
"""

!pip install flask

!pip install flask-ngrok

from google.colab.output import eval_js
print(eval_js("google.colab.kernel.proxyPort(5000)"))



#from flask_ngrok import run_with_ngrok
from flask import Flask, request, render_template_string
import numpy as np
import pickle

app = Flask(__name__)


# Load your models and preprocessor
decision_tree = pickle.load(open('decisiontreeregressor.pkl', 'rb'))
#random_forest = pickle.load(open('randomforest.pkl', 'rb'))
linear_regression = pickle.load(open('regression_model (6).pkl', 'rb'))
lasso = pickle.load(open('final_lasso (5).pkl', 'rb'))
ridge = pickle.load(open('final_ridge (4).pkl', 'rb'))
preprocessor = pickle.load(open('preprocessor.pkl', 'rb'))



@app.route('/')
def index():
    return render_template(index.html)

@app.route('/predict', methods=['POST'])
def predict():
    features = [float(request.form.get(feature)) for feature in ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene']]
    city = request.form.get('City')  # Assuming 'City' is a category that you may handle separately
    features = np.array(features).reshape(1, -1)
    scaled_features = preprocessor.transform(features)

    prediction1 = decision_tree.predict(scaled_features)[0]
    #prediction2 = random_forest.predict(scaled_features)[0]
    prediction3 = linear_regression.predict(scaled_features)[0]
    prediction4 = lasso.predict(scaled_features)[0]
    prediction5 = ridge.predict(scaled_features)[0]

    return render_template(results.html,
                                  prediction1=prediction1,
                                  #prediction2=prediction2,
                                  prediction3=prediction3,
                                  prediction4=prediction4,
                                  prediction5=prediction5)

from google.colab import output
output.serve_kernel_port_as_window(5000)

app.run()























